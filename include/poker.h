/**
 * @class Pokerクラス
 * @brief Pokerクラス
 * Pokerゲームの管理を行います
 * 役の判定や勝敗を実施します
 * 
 * @file poker.h
 */
#ifndef __POKER_H__
#define __POKER_H__

/************************************************************************************************/
/*	定義値																						*/
/************************************************************************************************/

/************************************************************************************************/
/*	構造体定義																					*/
/************************************************************************************************/

/************************************************************************************************/
/*	関数プロトタイプ宣言																		*/
/************************************************************************************************/

/**
 * @brief	手札の有効判定
 * @note	手札が揃っているかを判定する
 *
 * @param[in]	card	手札情報
 * @return
 * |値 | 説明 |
 * |---|------|
 * | E_TRUE |有効な手札|
 * | E_FALSE |無効な手札|
 */
E_BOOL poker_validCard(HAND_CARD card);

/**
 * @brief	ポーカーの役を判定する
 * @note	役を判定して結果を出力する
 *
 * @param[in]	card	手札情報
 * @return
 * |値 | 説明 |
 * |---|------|
 * | E_POKER_HAND |判定結果の役情報|
 */
E_POKER_HAND poker_judgment(HAND_CARD card);

/**
 * @brief	ポーカーの勝敗を判定する
 * @note	役を判定して勝敗結果を出力する
 *
 * @param[in]	card1	手札情報
 * @param[in]	card2	手札情報
 * @return
 * |値 | 説明 |
 * |---|------|
 * | E_POKER_COMP_RESULT |勝敗情報|
 */
E_POKER_COMP_RESULT poker_judgmentComp(HAND_CARD card1, HAND_CARD card2);

/**
 * @brief	ポーカーの役を出力する
 * @note	役の文字列を出力する
 *
 * @param[in]	pokerHand	手札情報
 * @return		役の文字列
 */
const C1* poker_hand(E_POKER_HAND pokerHand);

#endif /* __POKER_H__ */